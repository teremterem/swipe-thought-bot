import logging
import re

from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from telegram.ext import CommandHandler, DispatcherHandlerStop, Filters, MessageHandler, RegexHandler, \
    CallbackQueryHandler

from functions.common.constants import DataKey
from functions.common.swiper_matcher import get_all_swiper_chat_ids, find_match_for_swiper
from functions.common.swiper_telegram import BaseSwiperConversation

logger = logging.getLogger(__name__)


class Story:
    SHARE_SEMI_ANONYMOUSLY = '–ú–µ–Ω—è —á—Ç–æ-—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç –∏ —è —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º [–ø–æ–ª—É]–∞–Ω–æ–Ω–∏–º–Ω–æ - —è [–ø–æ–∫–∞-—á—Ç–æ] –Ω–µ —Ö–æ—á—É ' \
                             '–¥—É–º–∞—Ç—å/–∑–Ω–∞—Ç—å, –∫–æ–º—É –º–æ—è –º—ã—Å–ª—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.'


class Reaction:
    LIKE_STRANGER_THOUGHT = 'like_stranger_thought'
    REJECT_STRANGER_THOUGHT = 'reject_stranger_thought'
    RESPOND_TO_STRANGER = 'respond_to_stranger'

    LIKE_BOT_THOUGHT = 'like_bot_thought'
    REJECT_BOT_THOUGHT = 'reject_bot_thought'
    RESPOND_TO_BOT = 'respond_to_bot'


class ProtoKey:
    SWIPER3_INDEXED_MSG_ID = 'swiper3_indexed_msg_id'


class SwiperPrototype(BaseSwiperConversation):
    def assert_swiper_authorized(self, update, context):
        # single-threaded environment with non-async update processing
        if not self.swiper_update.current_swiper.swiper_data.get(DataKey.IS_SWIPER_AUTHORIZED):
            # https://github.com/python-telegram-bot/python-telegram-bot/issues/849#issuecomment-332682845
            raise DispatcherHandlerStop()

    def configure_dispatcher(self, dispatcher):
        dispatcher.add_handler(MessageHandler(Filters.all, self.assert_swiper_authorized), -100500)
        # TODO oleksandr: guard CallbackQueryHandler as well ? any other types of handlers not covered ?

        dispatcher.add_handler(CommandHandler('start', self.start))
        dispatcher.add_handler(RegexHandler(re.escape(Story.SHARE_SEMI_ANONYMOUSLY), self.share_semi_anonymously))
        dispatcher.add_handler(CallbackQueryHandler(self.reject_stranger_thought,
                                                    pattern=re.escape(Reaction.REJECT_STRANGER_THOUGHT)))
        dispatcher.add_handler(CallbackQueryHandler(self.respond_to_bot,
                                                    pattern=re.escape(Reaction.RESPOND_TO_BOT)))

        dispatcher.add_handler(MessageHandler(Filters.all, self.todo))
        dispatcher.add_handler(CallbackQueryHandler(self.todo))

    def _seed_chat_history(self, context, chat_id):
        indexed_msg = context.bot.send_message(
            chat_id=chat_id,
            text='<i>–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫–∞—è-—Ç–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–æ—Ç–æ–º, –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –¥—Ä—É–≥–∏–º–∏ '
                 '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.</i>',
            parse_mode=ParseMode.HTML,
        )
        swiper = self.swiper_update.get_swiper(chat_id)  # single-threaded environment with non-async update processing
        swiper.swiper_data[ProtoKey.SWIPER3_INDEXED_MSG_ID] = indexed_msg.message_id

    def start(self, update, context):
        for swiper_chat_id in get_all_swiper_chat_ids():
            self._seed_chat_history(context, swiper_chat_id)

        update.effective_chat.send_message(
            text='–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!',
            reply_markup=ReplyKeyboardMarkup(
                [[
                    Story.SHARE_SEMI_ANONYMOUSLY,
                ]],
                one_time_keyboard=True,
            ),
        )

    def share_semi_anonymously(self, update, context):
        matched_swiper_chat_id = find_match_for_swiper(update.effective_chat.id)

        context.bot.send_message(
            chat_id=matched_swiper_chat_id,
            text='–í–∞–º –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª. –≠—Ç–æ—Ç –∫—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –∏–º–µ–Ω–Ω–æ –≤–∞–º, –∞ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, –∫—Ç–æ —ç—Ç–æ—Ç –∫—Ç–æ-—Ç–æ. '
                 '–°–∏—Å—Ç–µ–º–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–±—Ä–∞–ª–∞, –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∏–º–µ–Ω–Ω–æ –≤–∞—Å.\n'
                 '\n'
                 '–í–∞–º –∑–Ω–∞–∫–æ–º—ã –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –∏–∑–ª–∏—Ç—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏? –£ –≤–∞—Å –µ—Å—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å (–ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å)? –ò–ª–∏ –º–æ–∂–µ—Ç '
                 '—Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ, –≤–∞—Å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç (–º–æ–º–µ–Ω—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ –≥–ª—É–ø–æ–µ)?',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton('‚ù§Ô∏è', callback_data=Reaction.LIKE_STRANGER_THOUGHT),
                    InlineKeyboardButton('‚ùå', callback_data=Reaction.REJECT_STRANGER_THOUGHT),
                ],
                [
                    InlineKeyboardButton('–£ –º–µ–Ω—è –µ—Å—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å‚Ä¶', callback_data=Reaction.RESPOND_TO_STRANGER),
                ]
            ]),
        )

    def reject_stranger_thought(self, update, context):
        update.effective_message.delete()
        update.callback_query.answer(text='‚ùå –û—Ç–≤–µ—Ä–≥–Ω—É—Ç–æüíî')
        context.bot.send_message(
            chat_id=SWIPER2_CHAT_ID,
            text='<i>–í—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ [–∫–∞–∫ –º–∏–Ω–∏–º—É–º, –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è]</i>',
            parse_mode=ParseMode.HTML,
        )
        context.bot.send_message(
            chat_id=SWIPER1_CHAT_ID,
            text='–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç. –ü—Ä–∞–≤–¥–∞, –Ω–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞. –ß–µ–ª–æ–≤–µ–∫ –µ–≥–æ –∫–æ–≥–¥–∞-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª, –Ω–æ –Ω–µ —á–µ–ª–æ–≤–µ–∫ –µ–≥–æ –≤–∞–º —Å–µ–π—á–∞—Å '
                 '–æ—Ç–ø—Ä–∞–≤–∏–ª.\n'
                 '\n'
                 '–í–∞–º –µ—Å—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏–ª–∏ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –∏–º–µ–µ—Ç –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞?',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton('üñ§', callback_data=Reaction.LIKE_BOT_THOUGHT),
                    InlineKeyboardButton('‚ùå', callback_data=Reaction.REJECT_BOT_THOUGHT),
                ],
                [
                    InlineKeyboardButton('–£ –º–µ–Ω—è –µ—Å—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å‚Ä¶', callback_data=Reaction.RESPOND_TO_BOT),
                ]
            ]),
        )

    def respond_to_bot(self, update, context):
        reply_to_msg_id = self.swiper_update.get_swiper(SWIPER3_CHAT_ID).swiper_data[ProtoKey.SWIPER3_INDEXED_MSG_ID]

        context.bot.send_message(
            chat_id=SWIPER1_CHAT_ID,
            text='<i>–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏</i>',
            parse_mode=ParseMode.HTML,
        )
        context.bot.send_message(
            chat_id=SWIPER3_CHAT_ID,
            text='–ö—Ç–æ-—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à—É —Å—Ç–∞—Ä—É—é –º—ã—Å–ª—å. –≠—Ç–æ—Ç –∫—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –∏–º–µ–Ω–Ω–æ –≤–∞–º, –∞ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, '
                 '–∫—Ç–æ —ç—Ç–æ—Ç –∫—Ç–æ-—Ç–æ.\n'
                 '\n'
                 '–ü—Ä–∏—á–∏–Ω–∞: –±–æ—Ç –ø–æ–¥–±—Ä–æ—Å–∏–ª —ç—Ç—É –≤–∞—à—É –º—ã—Å–ª—å –µ–º—É –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —á—Ç–æ-—Ç–æ, –∏ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ '
                 '–Ω–µ—ë.',

            # TODO oleksandr: handle telegram.error.BadRequest: Reply message not found
            reply_to_message_id=str(reply_to_msg_id),

            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton('‚ù§Ô∏è', callback_data=Reaction.LIKE_STRANGER_THOUGHT),
                    InlineKeyboardButton('‚ùå', callback_data=Reaction.REJECT_STRANGER_THOUGHT),
                ],
                [
                    InlineKeyboardButton('–£ –º–µ–Ω—è –µ—Å—Ç—å, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å‚Ä¶', callback_data='stub'),
                ]
            ]),
        )

    def todo(self, update, context):
        update.effective_chat.send_message('TODO')
