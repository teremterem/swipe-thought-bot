service: swipe-thought-bot
app: swipe-thought-bot
org: toporok

#frameworkVersion: '2.16.1'

provider:
  name: aws
  runtime: python3.8

  stage: ${opt:stage, '${file(./serverless.env.yml):SLS_STAGE}'}
  profile: ${file(./serverless.env.yml):AWS_PROFILE, ''}
  region: ${file(./serverless.env.yml):AWS_REGION}

  apiGateway:
    # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
    shouldStartNameWithService: true

  environment:
    LOG_LEVEL: ${file(./serverless.env.yml):LOG_LEVEL, 'WARNING'}

    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}

    TELEGRAM_TOKEN: ${file(./serverless.env.yml):TELEGRAM_TOKEN}

    ES_REGION: ${file(./serverless.env.yml):ES_REGION, '${self:provider.region}'}
    ES_HOST: ${file(./serverless.env.yml):ES_HOST}

    THOUGHTS_ES_IDX: ${file(./serverless.env.yml):ES_HOST}

package:
  individually: true
  include:
    - '!./**' # https://github.com/UnitedIncome/serverless-python-requirements#optimising-packaging-time
    - './functions/common/**'
  exclude:
    - '**'

functions:
  telegramWebhook:
    handler: functions/telegram_webhook.webhook
    package:
      include:
        - './functions/telegram_webhook.py'
    events:
      - http: POST /${self:custom.constants.WEBHOOK_TOKEN}
    maximumRetryAttempts: 0
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

  setTelegramWebhook:
    handler: functions/telegram_webhook.set_webhook
    package:
      include:
        - './functions/telegram_webhook.py'
    events:
      - http: POST /${self:custom.constants.WEBHOOK_TOKEN}/set_webhook
    maximumRetryAttempts: 0
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

plugins:
  - serverless-python-requirements

custom:
  constants:
    SERVICE_SHORT_NAME: stb
    WEBHOOK_TOKEN: ${file(./serverless.env.yml):WEBHOOK_TOKEN}

  pythonRequirements:
    dockerizePip: false
    layer:
      name: ${self:service}-${self:provider.stage}-python-vendor-common
      compatibleRuntimes:
        - python3.8

resources:
  Resources:
    ElasticSearchDomainSmall:
      Type: 'AWS::Elasticsearch::Domain'
      Properties:
        DomainName: es-small-${self:custom.constants.SERVICE_SHORT_NAME}-${self:provider.stage}
        ElasticsearchVersion: '7.9'
        ElasticsearchClusterConfig:
          ZoneAwarenessEnabled: false
          InstanceCount: 1
          InstanceType: t2.small.elasticsearch
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
