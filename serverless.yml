service: swipe-thought-bot
app: swipe-thought-bot
org: toporok

#frameworkVersion: '2.16.1'

provider:
  name: aws
  runtime: python3.8

  region: us-east-1
  stage: ${opt:stage, ''}
  profile: ${${self:custom.env_file}:PROFILE, ''}

  # https://www.serverless.com/framework/docs/deprecations/#LAMBDA_HASHING_VERSION_V2
  lambdaHashingVersion: 20201221

  apiGateway:
    # https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
    shouldStartNameWithService: true

  environment:
    LOG_LEVEL: ${${self:custom.env_file}:LOG_LEVEL, 'WARNING'}

    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}

    TELEGRAM_TOKEN: ${${self:custom.env_file}:TELEGRAM_TOKEN}

    ES_REGION: ${${self:custom.env_file}:ES_REGION, '${self:provider.region}'}
    ES_HOST: ${${self:custom.env_file}:ES_HOST}

    ES_SHOW_ANALYSIS: ${${self:custom.env_file}:ES_SHOW_ANALYSIS, 'no'}
    ES_EXPLAIN: ${${self:custom.env_file}:ES_EXPLAIN, 'no'}
    ES_NUM_OF_RESULTS: ${${self:custom.env_file}:ES_NUM_OF_RESULTS, '1'}

    THOUGHTS_ES_IDX: ${${self:custom.env_file}:THOUGHTS_ES_IDX}

    SWIPER_CHAT_DATA_DDB_TABLE_NAME: ${self:resources.Resources.swiperChatDataTable.Properties.TableName}
    MESSAGE_TRANSMISSION_DDB_TABLE_NAME: ${self:resources.Resources.messageTransmissionTable.Properties.TableName}

    MAIN_S3_BUCKET_NAME: ${self:resources.Resources.mainBucket.Properties.BucketName}

    AUTHORIZE_STRANGERS_BY_DEFAULT: ${${self:custom.env_file}:AUTHORIZE_STRANGERS_BY_DEFAULT, 'no'}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
        - "s3:*"
        - "es:*"
        #- "comprehend:*"
      Resource: "*"

package:
  individually: true
  include:
    - '!./**' # https://github.com/UnitedIncome/serverless-python-requirements#optimising-packaging-time
    - './functions/common/**'
    - './functions/__init__.py'
  exclude:
    - '**'

functions:
  telegramWebhook:
    handler: functions/telegram_webhook.webhook
    package:
      include:
        - './functions/swiper_experiments/**'
        - './functions/telegram_webhook.py'
    events:
      - http:
          method: POST
          path: /${self:custom.constants.WEBHOOK_TOKEN}
          async: true
    timeout: 20 # seconds (default is 6)
    maximumRetryAttempts: 0
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

  setTelegramWebhook:
    handler: functions/telegram_webhook.set_webhook
    package:
      include:
        - './functions/swiper_experiments/**'
        - './functions/telegram_webhook.py'
    events:
      - http: POST /${self:custom.constants.WEBHOOK_TOKEN}/set_webhook
    maximumRetryAttempts: 0
    layers:
      - { Ref: PythonRequirementsLambdaLayer }

plugins:
  - serverless-python-requirements

custom:
  env_file: file(./serverless.env-${self:provider.stage}.yml)
  constants:
    SERVICE_SHORT_NAME: stb
    WEBHOOK_TOKEN: ${${self:custom.env_file}:WEBHOOK_TOKEN}

  pythonRequirements:
    dockerizePip: false # TODO oleksandr: why false ?
    layer:
      name: ${self:custom.constants.SERVICE_SHORT_NAME}-${self:provider.stage}-python-vendor-common
      compatibleRuntimes:
        - python3.8

resources:
  Resources:
    swiperChatDataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SwiperChatData-${self:custom.constants.SERVICE_SHORT_NAME}-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: chat_id
            AttributeType: N
          - AttributeName: bot_id
            AttributeType: N
        KeySchema:
          - AttributeName: chat_id
            KeyType: HASH
          - AttributeName: bot_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain

    messageTransmissionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MessageTransmission-${self:custom.constants.SERVICE_SHORT_NAME}-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sender_msg_id
            AttributeType: N
          - AttributeName: sender_chat_id
            AttributeType: N
          #- AttributeName: sender_bot_id
          #  AttributeType: N
          - AttributeName: receiver_msg_id
            AttributeType: N
          - AttributeName: receiver_chat_id
            AttributeType: N
          #- AttributeName: receiver_bot_id
          #  AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: bySenderMsgId
            KeySchema:
              # TODO oleksandr: combine message id and chat id into one string hash key ? bot id too ?
              - AttributeName: sender_msg_id
                KeyType: HASH
              - AttributeName: sender_chat_id
                KeyType: RANGE
              #- AttributeName: sender_bot_id
              #  KeyType: RANGE
            Projection:
              # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html#GSI.Projections
              ProjectionType: ALL
          - IndexName: byReceiverMsgId
            KeySchema:
              # TODO oleksandr: combine message id and chat id into one string hash key ? bot id too ?
              - AttributeName: receiver_msg_id
                KeyType: HASH
              - AttributeName: receiver_chat_id
                KeyType: RANGE
              #- AttributeName: receiver_bot_id
              #  KeyType: RANGE
            Projection:
              # https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.html#GSI.Projections
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Retain

    mainBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.constants.SERVICE_SHORT_NAME}-${self:provider.stage}
